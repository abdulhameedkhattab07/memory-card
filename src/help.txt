Here’s a breakdown of the **Memory Card Game with Giphy API** in pseudocode to help explain the logic step by step.

### Pseudocode Overview

1. **Initialization**:
   - Set up the game board.
   - Fetch GIFs from the Giphy API.
   - Duplicate and shuffle the GIFs to create a grid of cards.

2. **Card Flip Logic**:
   - Allow the user to click on a card to flip it.
   - Keep track of flipped cards in a temporary array.
   - If two cards are flipped:
     - Check if they match.
     - If they match: Keep them flipped.
     - If they don’t match: Flip them back after a short delay.

3. **Game State Management**:
   - Update the game score when a match is found.
   - Reset the temporary flipped cards array after checking.

#### 1. **Fetch GIFs**
- Use Giphy API to retrieve a limited number of GIFs.
- Convert the API response into a usable list of GIFs.

FUNCTION fetchGifsFromGiphy():
    CALL Giphy API with a LIMIT (e.g., 6)
    STORE the response in a list of GIFs
    RETURN the list of GIFs (each GIF has an ID and URL)


#### 2. **Set Up Cards**
- Duplicate the GIFs to create pairs.
- Shuffle the list to randomize the card positions.
- Add a unique ID for each card so they can be tracked individually.

FUNCTION setupCards():
    CALL fetchGifsFromGiphy() → FETCH GIFS
    DUPLICATE each GIF to create pairs
    ASSIGN a unique identifier to each card (uniqueId)
    SHUFFLE the list of cards randomly
    RETURN the list of cards


#### 3. **Game State**
- Maintain the following game state:
  - `cards`: Array of all cards (flipped state, ID, URL).
  - `flippedCards`: Array to temporarily store the two flipped cards.
  - `score`: Counter for the number of matches.

INITIALIZE cards = setupCards()
INITIALIZE flippedCards = EMPTY LIST
INITIALIZE score = 0


#### 4. **Card Flip Logic**
- When a card is clicked:
  - Check if it is already flipped or two cards are already flipped.
  - Update the card’s flipped state.
  - Add the card to the `flippedCards` array.

FUNCTION handleCardClick(clickedCard):
    IF flippedCards contains 2 cards OR clickedCard is already flipped:
        RETURN  // Ignore the click

    FLIP the clickedCard (set isFlipped = true)
    ADD clickedCard to flippedCards

    IF flippedCards has 2 cards:
        CALL checkForMatch()

#### 5. **Check for Match**
- Compare the two flipped cards’ `ID`.
- If they match:
  - Keep both cards flipped.
  - Increment the score.
- If they don’t match:
  - Flip both cards back after a short delay.

FUNCTION checkForMatch():
    card1 = flippedCards[0]
    card2 = flippedCards[1]

    IF card1.id == card2.id:
        INCREMENT score by 1
        CLEAR flippedCards
    ELSE:
        WAIT for 1 second
        FLIP card1 and card2 back (set isFlipped = false)
        CLEAR flippedCards

#### 6. **Render Game Board**
- Display all cards in a grid layout.
- Show the front (GIF) if a card is flipped; otherwise, show a placeholder.

FUNCTION renderGameBoard():
    FOR EACH card IN cards:
        IF card.isFlipped:
            DISPLAY card's GIF (front side)
        ELSE:
            DISPLAY card's back side (placeholder)

#### 7. **End Game (Optional)**
- If the score matches the total pairs:
  - Show a “You Win!” message.

IF score == TOTAL NUMBER OF PAIRS:
    DISPLAY "You Win!"

### High-Level Flow

1. **Initialize the Game**:
   - Fetch GIFs → Duplicate → Shuffle → Set up cards.

2. **User Interaction**:
   - User clicks on a card → Flip card.
   - Add card to `flippedCards`.

3. **Check for Matches**:
   - If two cards are flipped:
     - Compare IDs.
     - Keep cards flipped if they match.
     - Flip back if they don’t match.

4. **Track Game State**:
   - Update `score` when matches are found.
   - Reset `flippedCards` after each check.

5. **Render UI**:
   - Display the cards in a grid format.
   - Update the UI dynamically when cards are flipped or matched.
